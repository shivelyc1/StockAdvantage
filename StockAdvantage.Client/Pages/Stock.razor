@page "/Stock"
@using Microsoft.AspNetCore.SignalR.Client
@using StockAdvantage.Client.Models
@inject NavigationManager Navigation
@rendermode InteractiveWebAssembly
@implements IAsyncDisposable

<h3>Stock Price Tracker</h3>
@if (IsConnected)
{
    <p style="color: green;">Connected to stock updates</p>
}
else
{
    <p style="color: red;">Disconnected from stock updates</p>

    <button @onclick="StartConnection">Reconnect</button>
}


<h3>Balance: @(Balance.ToString("F2"))</h3>

<p>Stock Symbol: <input type="text" @bind="StockSymbol" @onblur="FetchStockSymbol" /></p>
<p>Current Price: @StockPrice.ToString("F2")</p>

<!-- 
Error Text
-->
@if (!ErrorText.Equals(""))
{
    <p style="color: red">@ErrorText</p>
}

<!-- Buy Stock -->
<div>
    <h2>Buy Stock</h2>
    <p>Total Cost: @TotalCost</p>
    <p>Share Amount: <input type="number" min="0" step="any" value="@ShareAmount" @onchange="ChangeShareAmount"/></p>
    <button @onclick="BuyStock">Buy</button>
</div>


<div>
    <h2>Sell Stock</h2>
    <span>
        <p>Stock Symbol: </p>
        <select @bind="SellStockSymbol" @bind:event="onchange" @bind:after="CalculateSell" >
            @foreach (StockGroup group in StockGroups)
            {
                if (SellStockSymbol == null && StockGroups.IndexOf(group) == 0)
                {
                    // Initialize if Symbol is null and this is the first item
                    SellStockSymbol = group.Symbol;
                    
                    <option value="@group.Symbol" >@group.Symbol</option>
                }
                else
                {
                    <option value="@group.Symbol">@group.Symbol</option>
                }
            }
        </select>
    </span>
    <p>Sell Price: <input type="number" step="any" min="0" @bind="SellPrice" @bind:event="onchange" @bind:after="CalculateSell"/></p>
    <p>Share Amount: <input type="number" step="any" min="0" @bind="SellShareAmount" @bind:event="onchange" @bind:after="CalculateSell"/></p>
    <p>Sell Date: <input type="date" @bind="SellDate" @bind:event="onchange" @bind:after="CalculateSell"/></p>
    <p>Profit: @SellProfit</p>
    <p>Fee: @SellFee</p>
    @{
        var sellTotalPrice = SellProfit - SellFee;
        <p>Total Cost: @sellTotalPrice.ToString("F2")</p>
    }
    <button @onclick="SellStock">Sell</button>
    
    <!-- 
    Owned Stocks Table
    -->
    <h2>Current Stocks</h2>
    <table>
        <thead>
        <tr>
            <th style="padding: 0 .25rem">Symbol</th>
            <th style="padding: 0 .25rem">Amount</th>
            <th style="padding: 0 .25rem">Price</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var group in StockGroups)
            {
                <tr>
                    <td style="text-align: center; padding: 0 .25rem">@group.Symbol</td> 
                    <td style="text-align: center; padding: 0 .25rem">@group.NumberOfShares</td>
                    <td style="text-align: right; padding: 0 .25rem">@group.LatestPrice</td>
                </tr>
            }
        </tbody>
    </table>
</div>





<!--

Transaction History
 
-->
<h2>Transaction History</h2>
<table>
    <thead>
        <tr>
            <th>Date</th>
            <th>Symbol</th>
            <th>Type</th>
            <th>Amount</th>
            <th>Price</th>
            <th>Profit</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Transaction t in Transactions)
        {
            <tr>
                <td>@t.date</td>
                <td style="text-align: center;">@t.shortName</td>
                <td style="text-align: center;">@t.transactionType</td>
                <td style="text-align: center;">@t.amount</td>
                <td style="text-align: right;">@t.price</td>
                @if (t.transactionType.Equals(TransactionType.SELL))
                {
                    <td style="text-align: right;">@t.profit</td>
                }
                
            </tr>
        }
    </tbody>
</table>

@code {
    private HubConnection? hubConnection;
    private bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    private string StockSymbol { get; set; } = "AAPL";
    private decimal StockPrice { get; set; }

    // Buy Variables
    private decimal ShareAmount { get; set; } = 0;
    private decimal TotalCost { get; set; }


    // Sell Variables
    private string SellStockSymbol { get; set; }
    private DateTime SellDate { get; set; } = DateTime.Now;
    private decimal SellPrice { get; set; }
        // Should not be <= 0 and > StockGroup.NumberOfShares 
    private decimal SellShareAmount { get; set; } = 0;
        // Calculated based on SellStockSymbol
    private decimal SellProfit { get; set; } = 0;
        // wihtin 7 days deduct 18% from profit
    private decimal SellFee { get; set; }

    // Errors
    private string ErrorText { get; set; } = "";


    // User
    private decimal Balance;
    private List<Transaction> Transactions = new List<Transaction>();
    private List<StockGroup> StockGroups = new List<StockGroup>();


    protected override async Task OnInitializedAsync()
    {
        await StartConnection();
    }

    protected override void OnInitialized()
    {
        // Init Balance to 50000 
        Balance = 50000;
        
        
        TotalCost = CalculateTotalCost();
    }

    // Control Methods
    private void ChangeStockSymbol()
    {
        StockSymbol = SellStockSymbol;
        FetchStockSymbol();
    }

    private async void FetchStockSymbol()
    {
        // Send request to server to Update Stock
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("SendStockUpdate", StockSymbol);
        }
    }

    // Buy Methods
    private void ChangeShareAmount(ChangeEventArgs e)
    {
        if (e.Value == null)
        {
            return;
        }

        ShareAmount = Decimal.Parse(e.Value.ToString());
        TotalCost = CalculateTotalCost();

        // Update State
        InvokeAsync(StateHasChanged);
    }

    // Send BuyStock request and listen for ReceiveBuyStockUpdate
    private async Task BuyStock()
    {
        // Check for proper amount
        if (TotalCost > Balance)
        {
            ErrorText = "Insufficient Balance";
            return;
        }

        // Send request to server to BuyStock
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("SendBuyStockUpdate", StockSymbol, ShareAmount);
        }
    }

    // Used to control disabled on input 
    private bool IsBuyButtonDisabled()
    {
        return TotalCost > Balance && ShareAmount > 0;
    }

    // Used to calculate TotalPrice
    private decimal CalculateTotalCost()
    {
        return StockPrice * ShareAmount;
    }


    // Sell Methods

    private void CalculateSell()
    {
        Console.WriteLine("Sell Stock Symbol: " + SellStockSymbol);
        
        if (SellStockSymbol == null || SellStockSymbol.Length == 0)
        {
            return;
        }
        var group = StockGroups.Find(group => group.Symbol.Equals(SellStockSymbol));
        
        Console.WriteLine("Group Null: " + (group == null));
        if (group == null)
        {
            ErrorText = "Could not calculate sell totals. Stock was not found: " + SellStockSymbol;
            return;
        }

        var lastTransaction = Transactions.Find(transaction => transaction.shortName.Equals(group.Symbol));

        if (lastTransaction == null)
        {
            ErrorText = "Could not calculate sell totals. Stock hasn't been bought: " + SellStockSymbol;
            return;
        }
        
        SellProfit = (SellPrice * SellShareAmount) - (lastTransaction.price * SellShareAmount);
        
        // Fee calc
        var days = (SellDate - lastTransaction.date).Days;

        if (days <= 7)
        {
            SellFee = SellProfit * (decimal) .18;
        }
        else
        {
            SellFee = SellProfit * (decimal) .05;
        }
    }

    
    private async Task SellStock()
    {
        if (SellStockSymbol == null || SellStockSymbol.Length == 0)
        {
            ErrorText = "SellStockSymbol is null or empty";
            return;
        }

        if (SellShareAmount <= 0)
        {
            ErrorText = "SellShareAmount is <= 0";
            return;
        }

        // Check StockGroups for enough shares
        var stockGroup = StockGroups.Find(e => e.Symbol.Equals(SellStockSymbol));
        
        if (stockGroup == null)
        {
            ErrorText = "You don't own any shares for " + SellStockSymbol;
            return;
        }

        if (SellShareAmount > stockGroup.NumberOfShares)
        {
            ErrorText = "You don't have enough shares to sell";
            return;
        }
        

        if (hubConnection == null || hubConnection.State != HubConnectionState.Connected)
        {
            Console.WriteLine("Hub is not connected!");
            return;
        }
            
        await hubConnection.SendAsync("SendSellStockUpdate", SellStockSymbol, SellShareAmount);
    }
    
    
    
    
    

    private async Task StartConnection()
    {
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected)
        {
            return; // Already connected
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/stockHub")) 
            .Build();

        // Listen for stock updates
        hubConnection.On<string, decimal>("ReceiveStockUpdate", (symbol, price) =>
        {
            StockSymbol = symbol;
            StockPrice = price;
            TotalCost = price * ShareAmount;

            // Debugging: Log the received values to the console
            Console.WriteLine($"Received stock update: {StockSymbol} - {StockPrice}");
            
            // Add latest price fetched to StockGroup here
            var group = StockGroups.Find(group => group.Symbol.Equals(symbol));
            if (group != null)
            {
                group.LatestPrice = price;
            }
            
            InvokeAsync(StateHasChanged);
        });
        
        // Listen for Buy
        hubConnection.On<string, decimal, decimal, decimal>("ReceiveBuyStockUpdate", (stockSymbol, amount, price, totalCost) =>
        {
            // Show message of transaction.

            Balance -= totalCost;
            Transactions.Add(new Transaction(stockSymbol, amount, price, TransactionType.BUY));
            
            // Find If Stock Group Exists in list
            var stockGroup = StockGroups.Find(group => group.Symbol.Equals(stockSymbol));

            // If no stock group Create new group with amount
            if (stockGroup == null)
            {
                StockGroups.Add(new StockGroup(stockSymbol, price, amount));
            }
            else
            {
                // Add amount to stock group NumberOfShares
                stockGroup.NumberOfShares += amount;
                // Set price to latest price
                stockGroup.LatestPrice = price;
            }
            
            InvokeAsync(StateHasChanged);
            StateHasChanged();
        });
        
        // Listen for sale
        hubConnection.On<string, decimal, decimal>("ReceiveSellStockUpdate", (stockSymbol, amount, price) =>
        {
            
            var group = StockGroups.Find(group => group.Symbol.Equals(SellStockSymbol));

            if (group == null)
            {
                ErrorText = "Could not calculate sell totals. Stock was not found: " + SellStockSymbol;
                return;
            }

            var lastTransaction = Transactions.Find(transaction => transaction.shortName.Equals(group.Symbol));

            if (lastTransaction == null)
            {
                ErrorText = "Could not calculate sell totals. Stock hasn't been bought: " + SellStockSymbol;
                return;
            }

            var stockGroup = StockGroups.Find(e => e.Symbol == stockSymbol);
            if (stockGroup == null || stockGroup.NumberOfShares < amount)
            {
                ErrorText = "You don't have enough shares to sell";
                return;
            }
        
            SellProfit = (SellPrice * SellShareAmount) - (lastTransaction.price * SellShareAmount);
        
            // Fee calc
            int days = (SellDate - lastTransaction.date).Days;

            if (days <= 7)
            {
                SellFee = SellProfit * (decimal) .18;
            }
            else
            {
                SellFee = SellProfit * (decimal) .05;
            }
            
            // Create Transaction
            // Subtracted the sell fee from the profit to display accurate logs. Probably should add a SellFee field
            Transactions.Add(new Transaction(stockSymbol, amount, price, TransactionType.SELL ,SellProfit - SellFee));
            
            // Update StockGroups
            group.NumberOfShares -= amount;
            group.LatestPrice = price;

            Balance += SellProfit - SellFee;
            
            InvokeAsync(StateHasChanged);
            StateHasChanged();
        });
        
        
        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection established.");
            _ = StartStockUpdates(); // Start the stock update loop
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to SignalR: {ex.Message}");
        }
    }

    private async Task StartStockUpdates()
    {
        // Loop with delay in for intervals.
        while (IsConnected)
        {
            await hubConnection.SendAsync("SendStockUpdate", StockSymbol);
            Console.WriteLine("Requesting stock update...");
            // TODO: remove this
            break;
            await Task.Delay(60000); 
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
            Console.WriteLine("SignalR connection disposed.");
        }
    }
}
